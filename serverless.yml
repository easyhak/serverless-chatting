service: slack-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.10
  stage: dev
  region: ap-northeast-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/*"
            # 전체 테이블

layers:
  pyjwt:
    path: pyjwt
    description: pyjwt layer
    compatibleRuntimes:
      - python3.10
      - python3.9
    retain: true # layer versions are not deleted as new ones are created
functions:
  create:
    handler: api/create.create
    events:
      - httpApi:
          path: /api
          method: post

  list:
    handler: api/list.list
    events:
      - httpApi:
          path: /api
          method: get

  get:
    handler: api/get.get
    events:
      - httpApi:
          path: /api/{id}
          method: get

  update:
    handler: api/update.update
    events:
      - httpApi:
          path: /api/{id}
          method: put

  delete:
    handler: api/delete.delete
    events:
      - httpApi:
          path: /api/{id}
          method: delete
  addUser:
    handler: api/add_user.add_user
    events:
      - httpApi:
          path: /user
          method: post
  addChannel:
    handler: api/add_channel.add_channel
    events:
      - httpApi:
          path: /channel
          method: post
resources:
  Resources:

    # table definition
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-table-${sls:stage}

    ChannelDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: channel-table-${sls:stage}

    WorkSpaceDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: workspace-table-${sls:stage}
    ChannelChattingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: channel-chatting-table-${sls:stage}

    DMDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: sender
            AttributeType: S
        KeySchema:
          - AttributeName: sender
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: dm-table-${sls:stage}

