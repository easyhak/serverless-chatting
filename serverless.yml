service: slack-backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: dev
  timeout: 10
  region: ap-northeast-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/*"
            # 전체 테이블
plugins:
  - serverless-dynamodb
  - serverless-offline
custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      seed: true
      migrate: true
layers:
  pyjwt:
    path: pyjwt
    description: pyjwt layer
    compatibleRuntimes:
      - python3.10
      - python3.9
    retain: true # layer versions are not deleted as new ones are created
functions:

  # todos example
  hello:
    handler: api/todos/hello.hello
    events:
      - httpApi:
          path: /hello
          method: get
  create:
    handler: api/todos/create.create
    events:
      - httpApi:
          path: /todos
          method: post

  list:
    handler: api/todos/list.list
    events:
      - httpApi:
          path: /todos
          method: get

  get:
    handler: api/todos/get.get
    events:
      - httpApi:
          path: /todos/{id}
          method: get

  update:
    handler: api/todos/update.update
    events:
      - httpApi:
          path: /todos/{id}
          method: put

  delete:
    handler: api/todos/delete.delete
    events:
      - httpApi:
          path: /todos/{id}
          method: delete
  # user
  addUser:
    handler: api/user/add_user.add_user
    events:
      - httpApi:
          path: /user
          method: post
  # workspace
  addWorkspace:
    handler: api/workspace/add_workspace.add_workspace
    events:
      - httpApi:
          path: /workspace
          method: post
  deleteWorkspace:
    handler: api/workspace/delete_workspace.delete_workspace
    events:
      - httpApi:
          path: /workspace/{workspace_name}
          method: delete
  getWorkspace:
    handler: api/workspace/get_workspace.get_workspace
    events:
      - httpApi:
          path: /workspace/{workspace_name}
          method: get
  getWorkspaces:
    handler: api/workspace/get_workspaces.get_workspaces
    events:
      - httpApi:
          path: /workspaces/{user_email}
          method: get
      # channel
  addChannel:
    handler: api/channel/add_channel.add_channel
    events:
      - httpApi:
          path: /channel
          method: post

resources:
  Resources:

    # table definition

    # todo table
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: todo-table-${sls:stage}
    # PK SK table
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: main-table-${sls:stage}
    # user table
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: user-table-${sls:stage}
    # channel table
    ChannelDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: channel-table-${sls:stage}

    # workspace table
    WorkSpaceDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: workspace_id
            AttributeType: S
        KeySchema:
          - AttributeName: workspace_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: workspace-table-${sls:stage}

    # channel table
    ChannelChattingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: chat_id
            AttributeType: S
        KeySchema:
          - AttributeName: chat_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: channel-chatting-table-${sls:stage}

    # dm table
    DMDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: dm_id
            AttributeType: S
        KeySchema:
          - AttributeName: dm_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: dm-table-${sls:stage}

